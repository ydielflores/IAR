#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label visible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        ;Enable LCD segments 0-21, 26-43

        MOV.W   #0xffff, &LCDCPCTL0
        MOV.W   #0xfc3f, &LCDCPCTL1
        MOV.W   #0x0fff, &LCDCPCTL2
        
UnlockGPIO:
        BIC.W   #LOCKLPM5, &PM5CTL0
        
Initialize LCD:         
        MOV.W   #0x041e, &LCDCCTL0      
        MOV.W   #0x0208, &LCDCVCTL      ;Enable charge pump and select internal reference for it         
        MOV.W    #0X8000, &LCDCCPCTL    ;Clock syncrhonization enabled         
        MOV.W   #2, &LCDCMEMCTL         ;Clear LCD memory 
        
        BIS.W   #1, &LCDCCTL0           ;Turn LCD on 

SetupButtons:
        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default
        mov.b   #11111001B,&P1DIR       ; Set P1.1 and P1.2 for input and all
                                        ; other P1 pins for output
        mov.b   #00000110B,&P1REN       ; Set resistors for P1.1 and P1.2 as
                                        ; as pull-down
        bis.b   #00000110B,&P1OUT
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        CALL    #Title
        
Title:
          MOV.W   #2, &LCDCMEMCTL 
         
          MOV.B   #0x0E, &0xA29    ; K
          MOV.B   #0x22, &0xA2A
          MOV.B   #0xEF, &0xA25    ; A
          MOV.B   #0xB7, &0xA23    ; S
          MOV.B   #0x90, &0xA32    ; I
          MOV.B   #0x50, &0xA33
          MOV.B   #0x6C, &0xA2E    ; N
          MOV.B   #0x82, &0xA2F
          MOV.B   #0xFC, &0xA27    ; O
          
         
         RET

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        NOP
        END
