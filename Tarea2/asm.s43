#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label visible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        ;Enable LCD segments 0-21, 26-43

        MOV.W   #0xffff, &LCDCPCTL0
        MOV.W   #0xfc3f, &LCDCPCTL1
        MOV.W   #0x0fff, &LCDCPCTL2
        
UnlockGPIO:
        BIC.W   #LOCKLPM5, &PM5CTL0
        
Initialize LCD:         
        MOV.W   #0x041e, &LCDCCTL0      
        MOV.W   #0x0208, &LCDCVCTL      ;Enable charge pump and select internal reference for it         
        MOV.W    #0X8000, &LCDCCPCTL     ;Clock syncrhonization enabled         
        MOV.W   #2, &LCDCMEMCTL         ;Clear LCD memory 
        
        BIS.W   #1, &LCDCCTL0           ;Turn LCD on 

SetupButtons:
        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default
        mov.b   #11111001B,&P1DIR       ; Set P1.1 and P1.2 for input and all
                                        ; other P1 pins for output
        mov.b   #00000110B,&P1REN       ; Set resistors for P1.1 and P1.2 as
                                        ; as pull-down
        bis.b   #00000110B,&P1OUT



        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ;Title 
        CALL    #ShowTitle
        CALL    #ReadS1
        CALL    #Delay
        
        
        ; Initializing the index value of the name list
        MOV.B   #0,R6
        ; Clearing flag values
        CALL    #clearFlags
        CALL    #showNamesLoop
        
        JMP     menuSection1
        
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Purpose: Break from a call usually after checking the value from one of the flags (equivalent of "break" in python)
; Pre-conditions: None
; Post-conditions: Breaks from the last call
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
break:
        RET


; Purpose: Resets the counter that points to the display choice 
; Pre-conditions: None
; Post-conditions: Stores 0 in R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
resetChoiceList:
        MOV.B   #0,R6
        CALL    #clearFlags
        CALL    #Delay
        RET


;Purpose: Display the title "F(P.Q)"
;Pre-conditions: None
;Post-conditions: The text "F(P.Q)" appears on the screen
;Arguments: None 
;Author: Eduardo Fuertes 
;Date: 11/1/2022
ShowTitle: 
        MOV.W   #2, &LCDCMEMCTL
        MOV.B   #0x8E, &0xA29 ; F
        MOV.B   #0x22, &0xA26 ; (
        MOV.B   #0xCF, &0xA23 ; P
        MOV.B   #0x01, &0xA24 ; .
        MOV.W   #0x02FC, &0xA32 ; Q
        MOV.B   #0x88, &0xA2F ; )
        RET
        
               
;Purpose: Waits for the user to press the S1 button 
;Pre-conditions: P1.1 S1 has been configured correctly 
;Post-conditions: The bit corresponding to S1 is 0 
;Arguments: None 
;Author: Ydiel Flores 
;Date: 11/1/2022
ReadS1:
        MOV.B   &P1IN,R5                ; Copy into R5 P1IN's byte
        AND.B   #00000110B,R5
        CMP.B   #00000100B,R5
        JNE     ReadS1                  
        RET


;Purpose: Waits for the user to press the S2 button 
;Pre-conditions: P1.2 S2 has been configured correctly 
;Post-conditions: The bit corresponding to S2 is 0 
;Arguments: None 
;Author: Julibert Diaz 
;Date: 11/1/2022
ReadS2:
        MOV.B   &P1IN,R5                ; Copy into R5 P1IN's byte
        AND.B   #00000110B,R5
        CMP.B   #00000010B,R5
        JNE     ReadS2                  
        RET     


; Purpose: Displaying the names according to the index value
; Pre-conditions: Name index value starts at 0
; Post-conditions: Displays a name from the list of names
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
showNamesLoop:
        CALL    #showCurrentName
        CALL    #clearFlags
        CALL    #iterateNameList                
        JN      break                   ; Breaks the loop if S2 was pressed 
        JMP     showNamesLoop
        
        
;Purpose: Displays the appropiate name on the display
;Pre-conditions: User input affecting the value of R6
;Post-conditions: Will display the name accoridng to the value of R6
;Arguments: None 
;Author: Eduardo Fuertes 
;Date: 11/1/2022
showCurrentName:
        cmp     #0,R6
        jeq     ShowName1
        cmp     #1,R6
        jeq     ShowName2
        cmp     #2,R6
        jeq     ShowName3
        jmp     ShowName4
        
        
;Purpose: Displays the first name (JULIBE)
;Pre-conditions: None
;Post-conditions: The text "JULIBE" appears on the screen
;Arguments: None 
;Author: Julibert Diaz 
;Date: 11/1/2022
ShowName1:
        MOV.W   #2, &LCDCMEMCTL    
        MOV.B   #0x70, &0xA29 ; J
        MOV.B   #0x7C, &0xA25 ; U
        MOV.B   #0x1C, &0xA23 ; L
        MOV.B   #0x90, &0xA32 ; I
        MOV.B   #0x50, &0xA33
        MOV.B   #0xF1, &0xA2E ; B
        MOV.B   #0x50, &0xA2F
        MOV.B   #0x9F, &0xA27 ; E
        RET


;Purpose: Displays the second name (ZANEIS)
;Pre-conditions: None
;Post-conditions: The text "ZANEIS" appears on the screen
;Arguments: None 
;Author: Zaneisha Estrella-Ballester 
;Date: 11/1/2022
ShowName2:
        MOV.W   #2, &LCDCMEMCTL
        MOV.B   #0x90, &0xA29 ; Z
        MOV.B   #0x28, &0xA2A
        MOV.B   #0xEF, &0xA25 ; A
        MOV.B   #0x6C, &0xA23 ; N
        MOV.B   #0x82, &0xA24
        MOV.B   #0x9F, &0xA32 ; E
        MOV.B   #0x90, &0xA2E ; I
        MOV.B   #0x50, &0xA2F
        MOV.B   #0xB7, &0xA27 ; S
        RET


;Purpose: Displays the third name (YDIEL)
;Pre-conditions: None
;Post-conditions: The text "YDIEL" appears on the screen
;Arguments: None 
;Author: Ydiel Flores
;Date: 11/1/2022
ShowName3:
        MOV.W   #2, &LCDCMEMCTL
        MOV.B   #0xB0, &0xA2A ; Y
        MOV.B   #0xF0, &0xA25 ; D
        MOV.B   #0x50, &0xA26 ;
        MOV.B   #0x90, &0xA23 ; I
        MOV.B   #0x50, &0xA24
        MOV.B   #0x9F, &0xA32 ; E
        MOV.B   #0x1C, &0xA2E ; L
        RET


;Purpose: Displays the fourth name (EDUARD)
;Pre-conditions: None
;Post-conditions: The text "EDUARD" appears on the screen
;Arguments: None 
;Author: Eduardo Fuertes 
;Date: 11/1/2022
ShowName4:
        MOV.W   #2, &LCDCMEMCTL
        MOV.B   #0x9F, &0xA29 ; E
        MOV.B   #0xF0, &0xA25 ; D
        MOV.B   #0x50, &0xA26 ;
        MOV.B   #0x7C, &0xA23 ; U
        MOV.B   #0xEF, &0xA32 ; A
        MOV.B   #0xCF, &0xA2E ; R
        MOV.B   #0x02, &0xA2F
        MOV.B   #0xF0, &0xA27 ; D
        MOV.B   #0x50, &0xA28 ;
        RET
        
        
        
; Purpose: Iterating the names each time S1 is pressed
; Pre-conditions: User input
; Post-conditions: Iterates the names
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
iterateNameList:
        CALL    #getUserInput
        JEQ     nextName                ; S1 was pressed
        RET





; Purpose: Incrementes the counter that points to the name we should display
; Pre-conditions: None
; Post-conditions: Increments R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
nextName:
        INC     R6
        CMP     #4,R6
        JEQ     resetChoiceList                 ; Go back to the start of the list if we passed the end of the list
        CALL    #Delay
        RET

        

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

menuSection1:
        
        
        CALL    #initMenu1                      ; Initialize this part of the menu
        CALL    #menu1Loop                      ; Menu loop
        CALL    #saveSelection1                 ; Saves selection after ending loop
        JMP     menuSection2                    ; Go to next part of the menu

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Purpose: Initializes the first part of the menu
; Pre-conditions:
; Post-conditions: Sets led display and other values
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
initMenu1:
        CALL    #Delay
        mov.w   #2, &LCDCMEMCTL                 ; Clear led display
        CALL    #showQ1                         ; Sets the question for this part
        mov.B   #0, R6                          ; Initialize first choice
        CALL    #clearFlags                     ; Clearing flag values
        RET


; Purpose: Displays the question for menu part 1
; Pre-conditions: None
; Post-conditions: Displays the text "S/U?"
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
showQ1:
        MOV.B   #0xB7, &0xA29 ; S
        MOV.B   #0x28, &0xA26 ; /
        MOV.B   #0x7C, &0xA23 ; U
        MOV.B   #0xC1, &0xA32 ; ?
        MOV.B   #0x10, &0xA33
        RET
        
        
; Purpose: Displays the first part of the menu
; Pre-conditions: None
; Post-conditions: Displays the first part of the menu
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
menu1Loop:
        CALL    #showCurrentSel1
        CALL    #clearFlags
        CALL    #iterateQ1                
        JN      break                   ; Breaks the loop if S2 was pressed
        JMP     menu1Loop


; Purpose: Displays the current selection for menu1
; Pre-conditions: User input
; Post-conditions: Displays "S" or "U" depending on the ammount of S1 presses
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
showCurrentSel1:
        cmp     #0,R6
        jeq     sel1Option1
        jmp     sel1Option2


; Purpose: Selection display functions
; Pre-conditions: R6 value
; Post-conditions: Displays selection according to the value in R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
sel1Option1:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xB7, &0xA27 ; S
        RET
sel1Option2:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0x7C, &0xA27 ; U
        RET
        


; Purpose: Iterating the options of Q1 each time S1 is pressed
; Pre-conditions: User input
; Post-conditions: Iterates the options for question #1
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
iterateQ1:
        CALL    #getUserInput
        JEQ     nextSel1                ; S1 was pressed
        RET


; Purpose: Incrementes the counter that points to the choice we should display for Q1
; Pre-conditions: None
; Post-conditions: Increments R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
nextSel1:
        INC     R6
        CMP     #2,R6
        JEQ     resetChoiceList           ; Go back to the start of the list if we passed the end of the list
        CALL    #Delay
        RET


; Purpose: Saves the selected choice for Q1
; Pre-conditions: None
; Post-conditions: Stores the choice value in R8
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
saveSelection1:
        MOV.B   R6,R8
        RET



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

menuSection2:
        ; Initialize first choice
        CALL    #initMenu2                      ; Initialize this part of the menu
        CALL    #menu2Loop                      ; Menu loop
        CALL    #saveSelection2                 ; Saves selection after ending loop
        JMP     menuSection3                    ; Go to next part of the menu
        
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        

; Purpose: Initializes the second part of the menu
; Pre-conditions: None
; Post-conditions: Sets led display and other values
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
initMenu2:
        CALL    #Delay
        mov.w   #2, &LCDCMEMCTL                 ; Clear led display
        CALL    #showQ2                         ; Sets the question for this part
        mov.B   #0, R6                          ; Initialize first choice
        CALL    #clearFlags                     ; Clearing flag values
        RET


; Purpose: Displays the question for menu part 2
; Pre-conditions: None
; Post-conditions: Displays the text "D/B?"
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
showQ2:
        MOV.B   #0xF0, &0xA29 ; D
        MOV.B   #0x50, &0xA2A ;
        MOV.B   #0x28, &0xA26 ; /
        MOV.B   #0xF1, &0xA23 ; B
        MOV.B   #0x50, &0xA24
        MOV.B   #0xC1, &0xA32 ; ?
        MOV.B   #0x10, &0xA33
        RET
        
        
; Purpose: Displays the second part of the menu
; Pre-conditions: None
; Post-conditions: Displays the second part of the menu
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
menu2Loop:
        CALL    #showCurrentSel2
        CALL    #clearFlags
        CALL    #iterateQ2                
        JN      break                   ; Breaks the loop if S2 was pressed
        JMP     menu2Loop


; Purpose: Displays the current selection for menu2
; Pre-conditions: User input
; Post-conditions: Displays "D" or "B" depending on the ammount of S1 presses
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
showCurrentSel2:
        cmp     #0,R6
        jeq     sel2Option1
        jmp     sel2Option2


; Purpose: Selection display functions
; Pre-conditions: R6 value
; Post-conditions: Displays selection according to the value in R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
sel2Option1:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xF0, &0xA27 ; D
        MOV.B   #0x50, &0xA28 ; 
        RET
sel2Option2:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xF1, &0xA27 ; B
        MOV.B   #0x50, &0xA28
        RET
        


; Purpose: Iterating the options of Q2 each time S1 is pressed
; Pre-conditions: User input
; Post-conditions: Iterates the options for question #2
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
iterateQ2:
        CALL    #getUserInput
        JEQ     nextSel2                ; S1 was pressed
        RET


; Purpose: Incrementes the counter that points to the choice we should display for Q2
; Pre-conditions: None
; Post-conditions: Increments R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
nextSel2:
        INC     R6
        CMP     #2,R6
        JEQ     resetChoiceList           ; Go back to the start of the list if we passed the end of the list
        CALL    #Delay
        RET


; Purpose: Saves the selected choice for Q2
; Pre-conditions: None
; Post-conditions: Stores the choice value in R9
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
saveSelection2:
        MOV.B   R6,R9
        RET



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

menuSection3:

        
        ; Initialize first choice
        CALL    #initMenu3                      ; Initialize this part of the menu
        CALL    #menu3Loop                      ; Menu loop
        CALL    #saveSelection3                 ; Saves selection after ending loop
        JMP     menuSection4                    ; Go to next part of the menu
        
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Purpose: Initializes the third part of the menu
; Pre-conditions: None
; Post-conditions: Sets led display and other values
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
initMenu3:
        CALL    #Delay
        mov.w   #2, &LCDCMEMCTL                 ; Clear led display
        CALL    #showQ3                         ; Sets the question for this part
        mov.B   #0, R6                          ; Initialize first choice
        CALL    #clearFlags                     ; Clearing flag values
        RET


; Purpose: Displays the question for menu part 2
; Pre-conditions: None
; Post-conditions: Displays the text "D/B?"
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
showQ3:
        MOV.B   #0xF0, &0xA29 ; D
        MOV.B   #0x50, &0xA2A ;
        MOV.B   #0x90, &0xA25 ; I
        MOV.B   #0x50, &0xA26
        MOV.B   #0xBD, &0xA23 ; G
        MOV.B   #0xC1, &0xA32 ; ?
        MOV.B   #0x10, &0xA33
        RET
        
        
; Purpose: Displays the third part of the menu
; Pre-conditions: None
; Post-conditions: Displays the third part of the menu
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
menu3Loop:
        CALL    #showCurrentSel3
        CALL    #clearFlags
        CALL    #iterateQ3                
        JN      break                   ; Breaks the loop if S2 was pressed
        JMP     menu3Loop


; Purpose: Displays the current selection for menu3
; Pre-conditions: Binary or Decimal choice that is stored in R9
; Post-conditions: Displays a number from "0" to "6" depending on the previous choices
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
showCurrentSel3:
        cmp     #0,R9
        jeq     decimalDigitSelection   ; Decimal number was selected
        jmp     binaryDigitSelection    ; Binary number was selected



; Purpose: Displays the digit number selection depending on the type of number the user selected
; Pre-conditions: User chose a decimal number or a binary number
; Post-conditions: Displays "0" or "1" if decimal, else "0" - "6" are the options
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
decimalDigitSelection:
        cmp     #0,R6
        jeq     showNum1
        jmp     showNum2
binaryDigitSelection:
        cmp     #0,R6
        jeq     showNum0
        cmp     #1,R6
        jeq     showNum1
        cmp     #2,R6
        jeq     showNum2
        cmp     #3,R6
        jeq     showNum3
        cmp     #4,R6
        jeq     showNum4
        cmp     #5,R6
        jeq     showNum5
        jmp     showNum6
        


; Purpose: Iterating the options of Q3 each time S1 is pressed
; Pre-conditions: User input
; Post-conditions: Iterates the options for question #3
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
iterateQ3:
        CALL    #getUserInput
        JEQ     nextSel3                ; S1 was pressed
        RET


; Purpose: Incrementes the counter that points to the choice we should display for Q3
; Pre-conditions: None
; Post-conditions: Increments R6
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
nextSel3:
        INC     R6
        CMP     #0,R9
        JEQ     nextSelDec
        JMP     nextSelBin
nextSelDec:
        CMP     #2,R6
        JEQ     resetChoiceList
        CALL    #Delay
        RET
nextSelBin:
        CMP     #7,R6
        JEQ     resetChoiceList
        CALL    #Delay
        RET
        


; Purpose: Saves the selected choice for Q3
; Pre-conditions: None
; Post-conditions: Stores the choice value in R10
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
saveSelection3:
        MOV.B   R6,R10
        RET



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

menuSection4:

        MOV.W   #2, &LCDCMEMCTL                 ; Clear display
        CALL    #setDigitCounter                ; Sets counter
        CALL    #generateNum
        MOV.B   #21,R12
        MOV.B   #15,R13
        CALL    #multiplyNum
        MOV.B   R14,R15
        
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


setDigitCounter:
        MOV.B   #0,R6                           ; Sets the counter that iterates each digit loop
        MOV.B   #1,R11                          ; Starts selecting first digit
        CMP     #0,R8
        JN      break
        CMP     #0,R9
        JN      break
        MOV.B   #0,R11                           ; Starts selecting sign if a signed decimal was selected
        RET
        




generateNum:
        CALL    selectEachPostion
        


selectEachPosition:
        CALL    numLoop0
        CALL    numLoop1
        CALL    numLoop2
        CALL    numLoop3
        CALL    numLoop4
        CALL    numLoop5
        CALL    numLoop6
        RET
        

; Purpose: Implements the selecting process for each digit of the number
; Pre-conditions: None
; Post-conditions: Displays the number selected
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
numLoop1:
        CALL    #getUserInput
        JN      break
        CALL    iteratorCall
        
        JMP     numLoop1
        
iteratorCall:
        JEQ     updateCounter           ; Will update counter if S1 was pressed
        RET
updateCounter:
        CALL    #Delay
        INC     R6
        CMP     #0,R9                   ; Indicates if a decimal or binary number was selected
        JEQ     limitDecimal
        JMP     limitBinary
limitDecimal:
        CMP     #10,R6
        MOV.B   #0,R6
limitBinary:
        CMP     #2,R6
        MOV.B   #0,R6
        RET
        

selectNumMenu4:
        CMP

; Purpose: Saves Multiplies two numbers
; Pre-conditions: R12 and R13 are the numbers to be multiplied
; Post-conditions: Multiplies R12 and R13 and stores it in R14
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
multiplyNum:
        MOV.B   #0,R11                  ; Initialize counter
        CMP     R13,R12
        JN      setGreaterMult          ; Results in less iterations for a multiplication
        MOV.B   #0,R14                  ; Initialize result
        JMP     multLoop
setGreaterMult:                         ; Swaps R12 and R13
        MOV.B   R12,R14
        MOV.B   R13,R12
        MOV.B   R14,R13
        MOV.B   #0,R14
        JMP     multLoop
multLoop:
        INC     R11
        CMP     R11,R13
        JN      break
        ADD.W   R12,R14
        JMP     multLoop






; Purpose: Led display numbers functions
; Pre-conditions: None
; Post-conditions: Each funciton displays a number
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
showNum0:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xFC, &0xA27 ; 0 
        RET
showNum1:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0x60, &0xA27 ; 1
        RET
showNum2:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xDB, &0xA27 ; 2 
        RET
showNum3:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xF3, &0xA27 ; 3
        RET
showNum4:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0x67, &0xA27 ; 4
        RET
showNum5:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xB7, &0xA27 ; 5
        RET
showNum6:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xBF, &0xA27 ; 6 
        RET
showNum7:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0x80, &0xA27 ; 7
        MOV.B   #0x28, &0xA28
        RET
showNum8:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xFF, &0xA27 ; 8
        RET
showNum9:
        BIC.B   #0xFF, &0xA27
        BIC.B   #0xFF, &0xA28
        MOV.B   #0xF7, &0xA27 ; 9 
        RET  
   
   
; Purpose: Update flag values to learn about the user input
; Pre-conditions: User can't press both buttons at the same time
; Post-conditions: Will update the Negative/Sign flag and the Zero flag
; 1 on the Negative/Sign flag will indicate that S2 was pressed
; 0 on the Negative/Sign flag will indicate that no button was pressed
; 1 on the Zero flag wil indicate that S1 was pressed
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
getUserInput:
        MOV.B   &P1IN,R5                ; Copy into R5 P1IN's byte
        AND.B   #00000110B,R5
        CMP.B   #00000000B,R5
        JEQ     getUserInput            ; Pressing both buttons at the same time isn't valid
        CMP.B   #00000100B,R5                  
        RET


; Purpose: Returns the hex value for displaying a digit
; Pre-conditions: The value of R6 will select the digit
; Post-conditions: Stores the equivalent hex value at R14 and R15
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/2/2022
getDigitDisplay:
        MOV.B   0x00,R14
        MOV.B   0x00,R15
        CMP     #0,R6
        JEQ     storeZero
        CMP     #1,R6
        JEQ     storeOne
        CMP     #2,R6
        JEQ     storeTwo
        CMP     #3,R6
        JEQ     storeThree
        CMP     #4,R6
        JEQ     storeFour
        CMP     #5,R6
        JEQ     storeFive
        CMP     #6,R6
        JEQ     storeSix
        CMP     #7,R6
        JEQ     storeSeven
        CMP     #8,R6
        JEQ     storeEight
        JMP     storeNine
storeZero:
        MOV.B   #0xFC,R14
        RET
storeOne:
        MOV.B   #0x60,R14
        RET
storeTwo:
        MOV.B   #0xDB,R14
        RET
storeThree:
        MOV.B   #0xF3,R14
        RET
storeFour:
        MOV.B   #0x67,R14
        RET
storeFive:
        MOV.B   #0xB7,R14
        RET
storeSix:
        MOV.B   #0xBF,R14
        RET
storeSeven:
        MOV.B   #0x80,R14
        MOV.B   #0x28,R15
        RET
storeEight:
        MOV.B   #0xFF,R14
        RET
storeNine:
        MOV.B   #0xF7,R14
        RET



;Purpose: Waits a specified period of time in order to prevent activating the button accidentally 
;Pre-conditions: None
;Post-conditions: The amount of time corresponding to 60,000 decrement operations has passed 
;Arguments: None 
;Author: Zaneisha Estrella-Ballester 
;Date: 11/1/2022
Delay:  
        MOV.W   #60000,R7
Next:
        DEC     R7
        JNZ     Next
        CALL    #clearFlags
        RET
       
        
; Purpose: Clears Sign and Zero flag values
; Pre-conditions: None
; Post-conditions: Negative/Sign flag and Zero flag are set to 0
; Arguments: None 
; Author: Eduardo Fuertes 
; Date: 11/1/2022
clearFlags:
        CLRN
        CLRZ
        RET
;Purpose: Divides the two specified numbers 
;Pre-conditions: R10 and R11 contain the numbers to be divided 
;Post-conditions: 
;       R10 contains the result of the division 
;       R11 contains the remainder of the division 
;Arguments: R10, R11
;Author: Cristina Figueroa
;Date: 4/17/2022
Divide:
        PUSH    R6
        PUSH    R7
        PUSH    R8
        PUSH    R9
        MOV     #0, R6
        MOV     #0, R7
        MOV     #0, R8
        MOV     #0, R9
        
        CMP     #32767, R10
        JEQ     NegativeDividend
        JC      NegativeDividend
        
CheckDivisor:
        CMP     #32767, R11
        JEQ     NegativeDivisor
        JC      NegativeDivisor
        
        JMP     divloop
        
NegativeDividend:
        MOV     #1, R6
        CALL    #ReverseTwosComplement
        JMP     CheckDivisor

NegativeDivisor:
        MOV     #1, R7
        PUSH    R10
        MOV     R11, R10
        CALL    #ReverseTwosComplement
        MOV     R10, R11
        POP     R10
        
divloop:
        CMP     R10, R11
        JEQ     fits
        JN      fits 
        JMP     doesnotfit 
        
fits: 
        SUB     R11, R10
        INC     R8
        JMP     divloop
        
doesnotfit:
        MOV     R10, R11
        MOV     R8, R10
        
        
        CMP     #1, R6                          ;Check if the dividend was negative 
        JEQ     NegativeDividend2
        
CheckDivisor2:
        CMP     #1, R7                          ;Check if the divisor was negative 
        JEQ     NegativeDivision
        JMP     DivideEnd
        
NegativeDividend2:
        CMP     #1, R7                          ;If both negative, result is positive 
        JEQ     DivideEnd

NegativeDivision:
        CALL    #TwosComplement
        
DivideEnd
        POP     R9
        POP     R8 
        POP     R7
        POP     R6
        
        RET


EndProgram:

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        NOP 
        END