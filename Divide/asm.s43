

#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

SetupP1:
        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default
        bic.b   #0xFF,&P9SEL0
        bic.b   #0xFF,&P9SEL1
        
        mov.b   #11111001B,&P1DIR       ; Set P1.1 and P1.2 for input and all
                                        ; other P1 pins for output

        bis.b   #0xFF,&P9DIR            ; Set all P9 pins for output

        mov.b   #00000110B,&P1REN        ; Activate P1.1 and P1.2 programable
                                        ; pull-up/pull-down resistors
        bis.b   #00000110B,&P1OUT       ; Set resistors for P1.1 and P1.2 as
                                        ; as pull-down
        bic.b   #0x01,&P1OUT            ; Clear P1.0 and P9.7 output latch to
        bic.b   #0x80,&P9OUT            ; start with both off

UnlockGPIO:                             ; Disable de GPIO power-on default
        bic.w   #LOCKLPM5,&PM5CTL0      ; high-impedance mode to activade
                                        ; previously configured port settings

Mainloop:
        MOV     #15,R4                  ; easy number to start, dividendo
        MOV     #5, R5                  ; divisor
        CALL    #Divide

Divide:
        MOV     #1,R6                   ;counter
        MOV     R5,R7                   ;save the multiplier
        MOV     R4,R8                   ;save for remainder
        CALL    #DivideLoop
        RET

DivideLoop:
        CMP     R7,R4                   ; > 0
        JNE     IncreaseCounter
        RET

IncreaseCounter:
        SUB     R7,R8                   ; the idea to verify if the difference between the
                                        ; total and the dividend would be 0 <= R7 - R8 < R5
        CMP     R5,R8                   ;This is meant to check if we are pass the out divisor, we can 
                                        ;stop and save the reminder (R8) for later 
        MOV     R4,R8
        ADD     #1,R6                   ;increase counter by 1
        ADD     R5,R7                   ; multiply
        JMP     DivideLoop

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        NOP
        END